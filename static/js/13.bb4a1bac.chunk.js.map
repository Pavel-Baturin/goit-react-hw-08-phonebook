{"version":3,"file":"static/js/13.bb4a1bac.chunk.js","mappings":"8OACA,EAAuB,2BAAvB,EAA0D,4BAA1D,EAA+F,6BAA/F,EAAoI,4BAApI,EAAwK,4B,UCKzJ,SAASA,IACtB,IAAMC,GAAQC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,SACxCI,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAoB,SAAAC,GACxB,MAAwBA,EAAEC,OAAlBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MAEd,OAAQT,GACN,IAAK,OACHC,EAAQQ,GACR,MACF,IAAK,QACHN,EAASM,GACT,MACF,IAAK,WACHJ,EAAYI,GACZ,MAEF,QACE,SAYN,OACE,iCACE,SAAC,KAAD,CAASC,SAAS,aAAaC,cAAc,KAC7C,kBAAMC,UAAWC,EAAQC,SAXR,SAAAP,GACnBA,EAAEQ,iBACFlB,GAASmB,EAAAA,EAAAA,IAAS,CAAEhB,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,KACjCH,EAAQ,IACRE,EAAS,IACTE,EAAY,KAMV,WACE,mBAAOO,UAAWC,EAAlB,kBAEE,kBACED,UAAWC,EACXI,KAAK,OACLjB,KAAK,OACLkB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRX,MAAOT,EACPqB,SAAUf,QAGd,mBAAOM,UAAWC,EAAlB,mBAEE,kBACED,UAAWC,EACXI,KAAK,QACLjB,KAAK,QACLsB,YAAY,kBACZF,UAAQ,EACRX,MAAOP,EACPmB,SAAUf,QAGd,mBAAOM,UAAWC,EAAlB,sBAEE,kBACED,UAAWC,EACXI,KAAK,WACLjB,KAAK,WACLuB,aAAa,MACbD,YAAY,8BACZE,UAAW,EACXJ,UAAQ,EACRX,MAAOL,EACPiB,SAAUf,QAGd,mBAAQM,UAAWC,EAAUI,KAAK,SAAlC,yBAIDxB,IAAS,eAAImB,UAAWC,EAAf,SAAyBpB","sources":["webpack://goit-react-hw-08-phonebook/./src/components/views/RegisterPage/RegisterPage.module.css?1d97","components/views/RegisterPage/RegisterPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"RegisterPage_form__NaZ4Z\",\"label\":\"RegisterPage_label__sH40E\",\"button\":\"RegisterPage_button__jEwca\",\"input\":\"RegisterPage_input__+ZDQ4\",\"error\":\"RegisterPage_error__F3D7I\"};","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Toaster } from 'react-hot-toast';\nimport { register } from 'redux/auth/auth-operations';\nimport s from './RegisterPage.module.css';\n\nexport default function RegisterPage() {\n  const error = useSelector(state => state.auth.error);\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(register({ name, email, password }));\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <>\n      <Toaster position=\"top-center\" reverseOrder={false} />\n      <form className={s.form} onSubmit={handleSubmit}>\n        <label className={s.label}>\n          Name\n          <input\n            className={s.input}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleInputChange}\n          />\n        </label>\n        <label className={s.label}>\n          Email\n          <input\n            className={s.input}\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"jane@sample.com\"\n            required\n            value={email}\n            onChange={handleInputChange}\n          />\n        </label>\n        <label className={s.label}>\n          Password\n          <input\n            className={s.input}\n            type=\"password\"\n            name=\"password\"\n            autoComplete=\"off\"\n            placeholder=\"enter at least 7 characters\"\n            minLength={7}\n            required\n            value={password}\n            onChange={handleInputChange}\n          />\n        </label>\n        <button className={s.button} type=\"submit\">\n          Register\n        </button>\n      </form>\n      {error && <h1 className={s.error}>{error}</h1>}\n    </>\n  );\n}\n"],"names":["RegisterPage","error","useSelector","state","auth","dispatch","useDispatch","useState","name","setName","email","setEmail","password","setPassword","handleInputChange","e","target","value","position","reverseOrder","className","s","onSubmit","preventDefault","register","type","pattern","title","required","onChange","placeholder","autoComplete","minLength"],"sourceRoot":""}